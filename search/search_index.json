{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Minifier Documentation","text":"<p>Asset minification and versioning library for CodeIgniter 4.</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#overview","title":"Overview","text":"<p>We can define files we want to combine and minify:</p> <pre><code>public $js = [\n    'all.min.js' =&gt; ['file1.js', 'file2.js']\n];</code></pre> <p>And then use it with only one line:</p> <pre><code>echo minifier('all.min.js');</code></pre> <p>This will return ready to use HTML tag:</p> <pre><code>&lt;script src=\"http://localhost/assets/js/all.min.js?v=9ef881911da8d7c4a1c2f19c4878d122\" type=\"text/javascript\"&gt;&lt;/script&gt;</code></pre>"},{"location":"basic-usage/","title":"Basic Usage","text":"<p>After defining our files we want to actually minify all the files we have. This is easy enough as running the command:</p> <pre><code>php spark minify:all</code></pre> <p>This will prepare everything and will set up a versioning. Make sure to load a minifier helper in your controller, by calling:</p> <pre><code>helper('minifier');</code></pre> <p>Now to generate a proper tag with desired file to load, you have to make a simple call in your code:</p> <pre><code>minifier('all.min.js');\n\n// or / and\n\nminifier('all.min.css');</code></pre> <p>This will produce:</p> <pre><code>&lt;script type=\"text/javascript\"\n        src=\"http://localhost/assets/js/all.min.js?v=9ef881911da8d7c4a1c2f19c4878d122\"&gt;&lt;/script&gt;\n\n&lt;!-- or / and --&gt;\n\n&lt;link rel=\"stylesheet\"\n      href=\"http://localhost/assets/css/all.min.css?v=50a35b0b1d1c3798aa556b8245314930\"&gt;</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#config-file","title":"Config File","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/Minifier.php</code>. Luckily, this package comes with handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark minify:publish</code></pre> <p>We will get our copy ready for modifications.</p> <p>Now, you should define an array of files that you want to minify, ie:</p> <pre><code>public array $js = [\n    'all.min.js' =&gt; [\n        'jquery-3.7.1.min.js', 'bootstrap-3.3.7.min.js', 'main.js',\n    ]\n];\n\n// or / and\n\npublic array $css = [\n    'all.min.css' =&gt; [\n        'bootstrap-3.3.7.min.css', 'font-awesome-4.7.0.min.css', 'main.css',\n    ]\n];</code></pre> <p>This way requesting for a <code>all.min.js</code> or <code>all.min.css</code> file will return a minified and combined version of all files in a given array.</p>"},{"location":"configuration/#config-options","title":"Config Options","text":""},{"location":"configuration/#minify","title":"$minify","text":"<p>Use this variable to turn on and off minification of the assets. Turning off can be useful during app development - for easy debugging.</p> <p>Available options: <code>true</code>, <code>false</code></p> <p>Default value: <code>true</code></p>"},{"location":"configuration/#baseurl","title":"$baseUrl","text":"<p>Use this variable when you want to set absolute path to the asset files. If no other URLs are set, like <code>$baseJsUrl</code> or <code>$baseCssUrl</code> then values set to <code>$dirJS</code> and <code>$dirCss</code> will be added to the final URL.</p> <p>Default value: <code>null</code></p>"},{"location":"configuration/#basejsurl","title":"$baseJsUrl","text":"<p>Use this variable when your JS assets are served from subdomain. Keep in mind that in this case variable <code>$dirJs</code> won't be added to the URL.</p> <p>Default value: <code>null</code></p>"},{"location":"configuration/#basecssurl","title":"$baseCssUrl","text":"<p>Use this variable when your CSS assets are served from subdomain. Keep in mind that in this case variable <code>$dirCSS</code> won't be added to the URL.</p> <p>Default value: <code>null</code></p>"},{"location":"configuration/#adapterjs","title":"$adapterJs","text":"<p>Adapter to use for minifying JS files. You can also implement your own JS adapter to minify assets and replace this class.</p> <p>Default value: <code>\\Michalsn\\Minifier\\Adapters\\Js\\MinifyAdapter::class</code></p>"},{"location":"configuration/#adaptercss","title":"$adapterCss","text":"<p>Adapter to use for minifying CSS files. You can also implement your own CSS adapter to minify assets and replace this class.</p> <p>Default value: <code>\\Michalsn\\Minifier\\Adapters\\Css\\MinifyAdapter::class</code></p>"},{"location":"configuration/#dirjs","title":"$dirJs","text":"<p>JS assets directory.</p> <p>Default value: <code>./assets/js</code></p>"},{"location":"configuration/#dircss","title":"$dirCss","text":"<p>CSS assets directory.</p> <p>Default value: <code>./assets/css</code></p>"},{"location":"configuration/#dirminjs","title":"$dirMinJs","text":"<p>Minified JS asset directory. If not set the value from <code>$dirJs</code> will be used instead.</p> <p>Default value: <code>null</code></p>"},{"location":"configuration/#dirmincss","title":"$dirMinCss","text":"<p>Minified CSS asset directory. If not set the value from <code>$dirCss</code> will be used instead.</p> <p>Default value: <code>null</code></p>"},{"location":"configuration/#dirversion","title":"$dirVersion","text":"<p>Directory to store assets versioning.</p> <p>Default value: <code>./assets</code></p>"},{"location":"configuration/#tagjs","title":"$tagJs","text":"<p>JS tag to use in HTML when displaying JS assets.</p> <p>Default value: <code>&lt;script type=\"text/javascript\" src=\"%s\"&gt;&lt;/script&gt;</code></p>"},{"location":"configuration/#tagcss","title":"$tagCss","text":"<p>CSS tag to use in HTML when displaying CSS assets.</p> <p>Default value: <code>&lt;link rel=\"stylesheet\" href=\"%s\"&gt;</code></p>"},{"location":"configuration/#returntype","title":"$returnType","text":"<p>Determines how the files will be returned. The default value is <code>html</code> and it uses the <code>$tagJs</code> and <code>$tagCss</code> variables. Using <code>array</code> will return the php array and <code>json</code> type will return a json string.</p> <p>Available options: <code>html</code>, <code>json</code>, <code>array</code></p> <p>Default value: <code>html</code></p>"},{"location":"configuration/#autodeployonchange","title":"$autoDeployOnChange","text":"<p>Specifies if we want to automatically deploy whenever there is a change to any of our assets files. Keep in mind that enabling this feature will have an impact on performance.</p> <p>Available options: <code>true</code>, <code>false</code></p> <p>Default value: <code>false</code></p>"},{"location":"configuration/#js","title":"$js","text":"<p>This array defines JS files to minify.</p>"},{"location":"configuration/#css","title":"$css","text":"<p>This array defines CSS files to minify.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require michalsn/minifier</code></pre>"}]}